<?xml version="1.0"?>
<doc>
    <assembly>
        <name>YoutubeNotifyBot</name>
    </assembly>
    <members>
        <member name="M:YoutubeNotifyBot.Controllers.DebugController.LogError">
            <summary>
            Test description
            </summary>
            <returns></returns>
        </member>
        <member name="M:YoutubeNotifyBot.Controllers.DiscordController.AddWebhook(System.UInt64,System.String)">
            <summary>
            Adds a new webhook to the database
            </summary>
            <param name="webhookId">Webhook id</param>
            <param name="token">Webhook token</param>
            <returns></returns>
        </member>
        <member name="M:YoutubeNotifyBot.Controllers.DiscordController.SetMessageTemplate(System.UInt64,System.String,System.String)">
            <summary>
            Sets the message templates for a discord webhook
            </summary>
            <param name="id">The webhook id</param>
            <param name="messageTemplate">Template for a discord message</param>
            <param name="embedTemplate">Template for a discord embedded message</param>
            <returns></returns>
        </member>
        <member name="M:YoutubeNotifyBot.Controllers.DiscordController.GetAll">
            <summary>
            Returns all the webhooks in the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:YoutubeNotifyBot.Controllers.DiscordController.DeleteWebhook(System.UInt64)">
            <summary>
            Deletes the given webhook from the database
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:YoutubeNotifyBot.Controllers.TwitterController.GetOauthLink">
            <summary>
            Gets a link to the oauth authorization page
            </summary>
            <returns></returns>
        </member>
        <member name="M:YoutubeNotifyBot.Controllers.TwitterController.OauthCallback(System.String,System.String)">
            <summary>
            Handles callback the from twitter authorization (No auth token required)
            </summary>
            <param name="oauth_token">Twitter oauth token</param>
            <param name="oauth_verifier">Twitter oauth verifier</param>
            <returns></returns>
        </member>
        <member name="M:YoutubeNotifyBot.Controllers.TwitterController.SetTweetTemplate(System.Int64,System.String)">
            <summary>
            Sets the template for tweets sent from the account
            </summary>
            <param name="id">Twitter users id</param>
            <param name="tweetTemplate">Template for tweets</param>
            <returns></returns>
        </member>
        <member name="M:YoutubeNotifyBot.Controllers.TwitterController.GetAll">
            <summary>
            Returns all the twitter users in the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:YoutubeNotifyBot.Controllers.TwitterController.DeleteUser(System.Int64)">
            <summary>
            Deletes the given twitter user from database
            </summary>
            <param name="id">Twitter users id</param>
            <returns></returns>
        </member>
        <member name="M:YoutubeNotifyBot.Controllers.UserController.GetToken(System.String,System.String)">
            <summary>
            Returns a bearer authentication token (No auth token required)
            </summary>
            <param name="username">The users username</param>
            <param name="password">The users password</param>
            <returns></returns>
        </member>
        <member name="M:YoutubeNotifyBot.Controllers.UserController.AddUser(System.String,System.String)">
            <summary>
            Adds a new user (Requires admin role)
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:YoutubeNotifyBot.Controllers.UserController.DeleteUser(System.Int32)">
            <summary>
            Deletes the given user (Requires admin role)
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:YoutubeNotifyBot.Controllers.YoutubePubSubController.AddNewSubscription(System.String)">
            <summary>
            Adds a new subscription to a YouTube channel
            </summary>
            <param name="channelId"></param>
            <returns></returns>
        </member>
        <member name="M:YoutubeNotifyBot.Controllers.YoutubePubSubController.GetAllSubscriptions">
            <summary>
            Returns all YouTube subscriptions in the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:YoutubeNotifyBot.Controllers.YoutubePubSubController.DeleteSubscription(System.String)">
            <summary>
            Deletes the given YouTube subscription
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:YoutubeNotifyBot.Controllers.YoutubePubSubController.LinkWebhookToSubscription(System.String,System.UInt64)">
            <summary>
            Links an existing webhook to an existing subscription
            </summary>
            <param name="id">YouTube channel id</param>
            <param name="webhookId">Webhook id</param>
            <returns></returns>
        </member>
        <member name="M:YoutubeNotifyBot.Controllers.YoutubePubSubController.UnlinkWebhookFromSubscription(System.String,System.UInt64)">
            <summary>
            Unlinks a webhook from a subscription
            </summary>
            <param name="id">YouTube channel id</param>
            <param name="webhookId">Webhook id</param>
            <returns></returns>
        </member>
        <member name="M:YoutubeNotifyBot.Controllers.YoutubePubSubController.LinkTwitterUser(System.String,System.Int64)">
            <summary>
            Links an existing twitter user to an existing subscription
            </summary>
            <param name="id">YouTube channel id</param>
            <param name="twitterId">Twitter user id</param>
            <returns></returns>
        </member>
        <member name="M:YoutubeNotifyBot.Controllers.YoutubePubSubController.UnlinkTwitterFromSubscription(System.String,System.Int64)">
            <summary>
            Unlinks a twitter user from a subscription
            </summary>
            <param name="id">YouTube channel id</param>
            <param name="twitterId">Twitter user id</param>
            <returns></returns>
        </member>
        <member name="M:YoutubeNotifyBot.Controllers.YoutubePubSubController.VerifySubscription(System.String)">
            <summary>
            Verifies the YouTube subscription (No auth token required)
            </summary>
            <param name="id">Channel id</param>
        </member>
        <member name="M:YoutubeNotifyBot.Controllers.YoutubePubSubController.SendNotifications(System.String,System.String,YoutubeNotifyBot.Models.Youtube.PubSubFeed)">
            <summary>
            Sends discord messages and tweets to notify users of newly uploaded YouTube videos (No auth token required)
            </summary>
            <param name="id">The youtube channel's id</param>
            <param name="verifyToken">Token to verify the sender</param>
            <param name="pubSubFeed">Xml feed about the youtube video</param>
            <returns></returns>
        </member>
        <member name="M:YoutubeNotifyBot.Controllers.YoutubePubSubController.RenewSubscriptions">
            <summary>
            Renews all YouTube subscriptions that expire within 25 hours
            </summary>
        </member>
        <member name="M:YoutubeNotifyBot.Models.SecureRandom.GetString(System.Int32)">
            <summary>
            Returns secure random string
            </summary>
            <param name="length">Length of string to be returned</param>
            <returns>Secure random string</returns>
        </member>
        <member name="M:YoutubeNotifyBot.Models.Youtube.YoutubeSubscription.SubscribeAsync(System.String)">
            <summary>
            Creates a new YouTube subscription 
            </summary>
            <param name="context">Database context</param>
            <param name="channelId">The id of the youtube channel</param>
            <returns></returns>
        </member>
    </members>
</doc>
